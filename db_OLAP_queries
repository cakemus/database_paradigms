/* To generate the first table, showing how many lesson, both type and total there were every month during the year */
SELECT 
  EXTRACT(YEAR FROM date) AS year,
  EXTRACT(MONTH FROM date) AS month,
  COUNT(*) AS total_lessons,
  COUNT(CASE WHEN pricing_id BETWEEN 1 AND 3 THEN 1 END) AS individual_lessons,
  COUNT(CASE WHEN pricing_id BETWEEN 4 AND 6 THEN 1 END) AS group_lessons,
  COUNT(CASE WHEN pricing_id BETWEEN 7 AND 9 THEN 1 END) AS ensemble_lessons
FROM 
  public.lesson
WHERE 
  EXTRACT(YEAR FROM date) = '2023'
GROUP BY 
  year, month
ORDER BY 
  year, month;

/* Generates table with sibling count of all students */

WITH SiblingCounts AS (
    SELECT 
        s.student_id, 
        COUNT(sr.sibling_id) AS sibling_count
    FROM 
        public.student s
        LEFT JOIN public.sibling_ref sr ON s.student_id = sr.student_id
    GROUP BY 
        s.student_id
)
SELECT 
    sibling_count, 
    COUNT(student_id) AS number_of_students
FROM 
    SiblingCounts
GROUP BY 
    sibling_count
ORDER BY 
    sibling_count;

/* Generates table that with teachers that have worked more than a specific amount of lessons in a month */

SELECT 
    i.instructor_id,
    p.first_name || ' ' || p.last_name AS instructor_name,
    COUNT(l.lesson_id) AS total_lessons
FROM 
    public.instructor_lesson il
    INNER JOIN public.lesson l ON il.lesson_id = l.lesson_id
    INNER JOIN public.instructor i ON il.instructor_id = i.instructor_id
    INNER JOIN public.person p ON i.person_id = p.person_id
WHERE 
    EXTRACT(MONTH FROM l.date) = EXTRACT(MONTH FROM CURRENT_DATE)
    AND EXTRACT(YEAR FROM l.date) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY 
    i.instructor_id, instructor_name
HAVING 
    COUNT(l.lesson_id) > '1'
ORDER BY 
    total_lessons DESC;


/* Generate table with ensembles for next week, which genre and how many seats left */

SELECT 
    e.lesson_id,
    e.genre,
    CASE
        WHEN EXTRACT(ISODOW FROM l.date) = 1 THEN 'Monday'
        WHEN EXTRACT(ISODOW FROM l.date) = 2 THEN 'Tuesday'
        WHEN EXTRACT(ISODOW FROM l.date) = 3 THEN 'Wednesday'
        WHEN EXTRACT(ISODOW FROM l.date) = 4 THEN 'Thursday'
        WHEN EXTRACT(ISODOW FROM l.date) = 5 THEN 'Friday'
        WHEN EXTRACT(ISODOW FROM l.date) = 6 THEN 'Saturday'
        WHEN EXTRACT(ISODOW FROM l.date) = 7 THEN 'Sunday'
    END AS weekday,
    CASE
        WHEN COUNT(sl.student_id) >= e.max_students THEN 'Fully Booked'
        WHEN e.max_students - COUNT(sl.student_id) <= 2 THEN '1-2 Seats Left'
        ELSE 'More Seats Left'
    END AS booking_status
FROM 
    public.ensemble e
    JOIN public.lesson l ON e.lesson_id = l.lesson_id
    LEFT JOIN public.student_lesson sl ON l.lesson_id = sl.lesson_id
WHERE 
    l.date >= CURRENT_DATE AND l.date < CURRENT_DATE + INTERVAL '1 week'
GROUP BY 
    e.lesson_id, e.genre, l.date
ORDER BY 
    EXTRACT(ISODOW FROM l.date);
